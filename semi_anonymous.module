<?php
/**
 * @file
 * Integrates Groucho with Drupal.
 */

/**
 * Implements hook_menu().
 */
function semi_anonymous_menu() {
  $items['admin/config/system/semi-anonymous'] = array(
    'title' => 'Semi Anonymous',
    'description' => 'Integrates anonymous user behavior tracking via the Groucho library with Drupal.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('semi_anonymous_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'semi_anonymous.admin.inc',
  );

  return $items;
}


/**
 * Implements hook_libraries_info().
 */
function semi_anonymous_libraries_info() {
  $libraries = array();

  $libraries['json2'] = array(
    'name' => 'JSON2',
    'vendor url' => 'https://github.com/douglascrockford/JSON-js',
    'download url' => 'https://github.com/douglascrockford/JSON-js/archive/master.zip',
    'version' => '2010-11-18',
    'files' => array(
      'js' => array(
        'json2.min.js' => array(
          'type' => 'file',
          'group' => JS_LIBRARY,
          'every_page' => TRUE,
        ),
      ),
    ),
    'error message' => t('The JSON2 library is missing for IE8 compatability.'),
  );
  $libraries['jstorage'] = array(
    'name' => 'jStorage',
    'vendor url' => 'http://www.jstorage.info',
    'download url' => 'https://github.com/andris9/jStorage/archive/master.zip',
    'version' => '0.4.11',
    'files' => array(
      'js' => array(
        'jstorage.min.js' => array(
          'type' => 'file',
          'group' => JS_LIBRARY,
          'every_page' => TRUE,
        ),
      ),
    ),
    'error message' => t('The jStorage library is missing.'),
  );
  $libraries['groucho'] = array(
    'name' => 'Groucho',
    'version' => '0.1.0',
    'vendor url' => 'https://github.com/tableau-mkt/groucho',
    'download url' => 'https://github.com/tableau-mkt/groucho/archive/master.zip',
    'files' => array(
      'js' => array(
        'groucho.min.js' => array(
          'type' => 'file',
          'group' => JS_LIBRARY,
          'every_page' => TRUE,
        ),
      ),
    ),
    'error message' => t('The Groucho library is missing.'),
    'dependencies' => array(
      array('semi_anonymous', 'jstorage'),
    ),
  );

  return $libraries;
}


/**
 * Implements hook_preprocess_HOOK().
 *
 * Outputs meta data details of the page, for use with local storage.
 */
function semi_anonymous_preprocess_html(&$variables) {
  $m = 'semi_anonymous_';

  // Library includes.
  _semi_anonymous_add_basic_assets();

  // Form submit recording behavior.
  $forms = _semi_anonymous_string_to_array(variable_get($m . 'record_forms', ''));
  $drupal_settings = array(
    'recordForms' => variable_get($m . 'record_form_submits', FALSE) ? $forms : FALSE,
    'stashedActivites' => variable_get('semi_anonymous_stashed_activities', array()),
    'userData' => _semi_anonymous_get_user_data(),
  );
  // Put Drupal-type settings on the page.
  drupal_add_js(array('semiAnonymous' => $drupal_settings), 'setting');

  // Output config settings...
  $properties = array_filter(variable_get($m . 'track_meta', array()));
  $groucho_configs = array(
    'taxonomyProperty' => 'entityTaxonomy',
    'trackExtent' => variable_get($m . 'track_browsing_extent', 25),
    'favThreshold' => variable_get($m . 'threshold', 2),
  );

  // Add entity properties.
  if (!empty($properties)) {
    $groucho_configs['trackProperties'] = array_keys($properties);
  }
  else {
    $groucho_configs['trackProperties'] = _datalayer_collect_meta_properties();
  }
  // Add taxonomy.
  if (variable_get($m . 'track_term_hits', TRUE)) {
    array_push($groucho_configs['trackProperties'], 'entityTaxonomy');
  }

  // Put Groucho configs it on the page.
  $config_output = !empty($groucho_configs) ? drupal_json_encode($groucho_configs) : '';
  drupal_add_html_head(array(
    '#type' => 'html_tag',
    '#tag' => 'script',
    '#value' => "window.groucho = window.groucho || {}; groucho.config = " . $config_output . ';',
    '#attributes' => array(
      'type' => 'text/javascript',
    ),
  ), 'semi_anonymous_settings');
}


/**
 * Implements hook_form_alter().
 */
function semi_anonymous_form_alter(&$form, &$form_state, $form_id) {
  // Custom activities for form posts.
  $forms = _semi_anonymous_string_to_array(variable_get('semi_anonymous_record_forms', ''));
  if (variable_get('semi_anonymous_record_form_submits', FALSE) && in_array($form_id, $forms)) {
    $form['#attached']['js'][] = array(
      'data' => drupal_get_path('module', 'semi_anonymous') . '/js/custom-activities.js',
      'type' => 'file',
    );
  }
}


/**
 * Implements hook_entity_property_info().
 */
function semi_anonymous_entity_load($entities, $type) {
  if ($type === 'user') {
    foreach ($entities as $entity) {
      // Data storage blob for front end user info.
      $entity->semi_anonymous = _semi_anonymous_get_user_data($entity->uid);
    }
  }
}


/**
 * Implements hook_stashed_semi_anonymous_activities_info().
 */
function semi_anonymous_stashed_semi_anonymous_activities_info(&$activities) {
  // Add internal stashed activities.
  return array(
    'formSubmit',
    'browsing',
  );
}


/**
 * Retrieve front-end data stored for user.
 *
 * @param string $uid
 *
 * @return string
 */
function _semi_anonymous_get_user_data($uid = 0) {
  global $user;
  $uid = $uid ?: $user->uid;

  $result = db_select('{semi_anonymous_user_data}', 'u')
    ->fields('d')
    ->condition('uid', $uid)
    ->execute()
    ->fetchObject();

  return $result->data;
}


/**
 * Add basic assets.
 */
function _semi_anonymous_add_basic_assets() {
  $libs = array(
    'json2' => 'json2.min.js',
    'jstorage' => 'jstorage.min.js',
    'groucho' => 'groucho.min.js',
  );
  // Necessary libraries (just jStorage now).
  // Using libraries 2.0
  if (function_exists('libraries_load')) {
    foreach ($libs as $lib_name => $lib_file) {
      $library = libraries_detect($lib_name);
      if ($library && !empty($library['installed'])) {
        libraries_load($lib_name);
      }
      else {
        // Something went wrong.
        drupal_set_message($library['error message'], 'error');
      }
    }
  }
  else {
    // Libraies 1.0
    foreach ($libs as $lib_name => $lib_file) {
      $path = libraries_get_path($lib_name);
      if (!empty($path) && file_exists($path . '/' . $lib_file)) {
        drupal_add_js($path . '/' . $lib_file);
      }
      else {
        drupal_set_message(t('The !lib_name library is missing.', array('!lib_name' => $lib_name)), 'error');
      }
    }
  }
}


/**
 * Get property selection list for admin config.
 */
function _semi_anonymous_property_list() {
  $return = array(
    'entityType',
    'entityBundle',
    'entityId',
    'entityLabel',
  );
  foreach (_datalayer_collect_meta_properties() as $p) {
    $return[] = 'entity' . ucfirst($p);
  }

  return $return;
}


/**
 * Convert string to array, splitting on comma and whitespace.
 */
function _semi_anonymous_string_to_array($value) {
  return preg_split('/[\s,]+/', $value, NULL, PREG_SPLIT_NO_EMPTY);
}
